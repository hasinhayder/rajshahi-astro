---
import { ClientRouter } from "astro:transitions"
import Header from "../components/Header.astro"
import Footer from "../components/Footer.astro"

interface Props {
  title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap" rel="stylesheet" />

    <script is:inline>
      // Apply theme immediately to prevent flicker
      ;(function () {
        const saved = localStorage.getItem("theme")
        const isDark = saved ? saved === "dark" : true
        if (isDark) {
          document.documentElement.classList.add("dark")
        }
      })()
    </script>

    <slot name="head" />

    <ClientRouter />
  </head>
  <body>
    <Header />
    <button id="theme-toggle" aria-label="Toggle dark/light mode" style="position:fixed;top:1.5rem;right:2rem;z-index:1000;background:none;border:none;font-size:1.5rem;cursor:pointer;opacity:0.7;transition:opacity 0.2s;" onmouseover="this.style.opacity=1" onmouseout="this.style.opacity=0.7" onclick="toggleTheme()">
      <span id="theme-icon">
        <!-- Default: Moon icon -->
        <svg id="icon-moon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24" style="display:inline;"><path d="M21 12.79A9 9 0 1 1 11.21 3a7 7 0 0 0 9.79 9.79z"></path></svg>
        <svg id="icon-sun" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24" style="display:none;">
          <circle cx="12" cy="12" r="5"></circle>
          <line x1="12" y1="1" x2="12" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="23"></line>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
          <line x1="1" y1="12" x2="3" y2="12"></line>
          <line x1="21" y1="12" x2="23" y2="12"></line>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
      </span>
    </button>
    <main class="minimal-container">
      <slot />
    </main>
    <Footer />

    <script is:inline>
      function setTheme(theme) {
        if (theme === "dark") {
          document.documentElement.classList.add("dark")
          const moonIcon = document.getElementById("icon-moon")
          const sunIcon = document.getElementById("icon-sun")
          if (moonIcon) moonIcon.style.display = "inline"
          if (sunIcon) sunIcon.style.display = "none"
        } else {
          document.documentElement.classList.remove("dark")
          const moonIcon = document.getElementById("icon-moon")
          const sunIcon = document.getElementById("icon-sun")
          if (moonIcon) moonIcon.style.display = "none"
          if (sunIcon) sunIcon.style.display = "inline"
        }
        localStorage.setItem("theme", theme)
      }

      function toggleTheme() {
        const isDark = document.documentElement.classList.contains("dark")
        setTheme(isDark ? "light" : "dark")
      }

      function initTheme() {
        const saved = localStorage.getItem("theme")
        const isDark = saved ? saved === "dark" : true
        setTheme(isDark ? "dark" : "light")
      }

      // Initialize theme when DOM is ready
      document.addEventListener("DOMContentLoaded", initTheme)

      // Handle view transitions - maintain theme across page navigations
      document.addEventListener("astro:before-preparation", () => {
        const saved = localStorage.getItem("theme")
        const isDark = saved ? saved === "dark" : true
        if (isDark) {
          document.documentElement.classList.add("dark")
        } else {
          document.documentElement.classList.remove("dark")
        }
      })

      // Re-initialize theme after view transition
      document.addEventListener("astro:after-swap", initTheme)
    </script>
  </body>
</html>

<style>
  body {
    margin: 0;
    width: 100%;
    min-height: 100vh;
    background: var(--background-color);
    color: var(--text-color);
    font-family: "Open Sans", system-ui, sans-serif;
    line-height: 1.7;
    transition:
      background var(--transition),
      color var(--transition);
  }
  .minimal-container {
    max-width: 900px;
    margin: 3.5rem auto 2.5rem auto;
    padding: 2.5rem 1.5rem 2.5rem 1.5rem;
    background: var(--card-bg);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
    min-height: 60vh;
    transition:
      background var(--transition),
      box-shadow var(--transition);
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Lora", serif;
    color: var(--heading-color);
    font-weight: 500;
    margin-top: 0;
    letter-spacing: -0.01em;
    margin-bottom: 1.2rem;
  }
  h1 {
    font-size: 2.2rem;
  }
  h2 {
    font-size: 1.5rem;
  }
  h3 {
    font-size: 1.2rem;
  }
  p,
  ul,
  ol {
    margin-top: 0;
    margin-bottom: 1.2rem;
    font-size: 1.08rem;
  }
  a {
    color: var(--accent-color) !important;
    text-decoration: none;
    border-bottom: 1px dotted var(--accent-color);
    transition:
      color var(--transition),
      border-color var(--transition);
  }

  body.dark a:hover {
    color: var(--link-hover-color) !important;
    border-bottom: 1px solid #90caf9;
    text-decoration: none !important;
  }

  #theme-toggle {
    background: none;
    color: var(--accent-color);
    border: none;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.5rem;
    cursor: pointer;
    box-shadow: none;
    opacity: 0.7;
    transition:
      opacity var(--transition),
      color var(--transition);
  }
  #theme-toggle:hover {
    opacity: 1;
    color: var(--link-hover-color);
  }
  header,
  footer {
    max-width: 700px;
    margin: 0 auto;
    padding: 1.2rem 1.5rem;
    background: transparent;
    border-radius: var(--radius);
    color: var(--text-color);
    border: none;
    box-shadow: none;
    text-align: center;
    font-size: 1.05rem;
    opacity: 0.85;
  }
  footer {
    margin-bottom: 1.5rem;
    font-size: 0.98rem;
    opacity: 0.7;
  }
  ::selection {
    background: var(--accent-color);
    color: #fff;
  }

  @media (max-width: 700px) {
    #theme-toggle {
      position: fixed;
      top: 1.65rem !important;
      right: 3rem !important;
      z-index: 1000;
    }
    .minimal-container,
    header,
    footer {
      max-width: 98vw;
      padding-left: 1.2rem;
      padding-right: 1.2rem;
    }

    .minimal-container {
      margin-top: 0px;
      border-radius: 0px;
      box-shadow: none;
      border: none;
      padding: 0.1rem 0.5rem 2.5rem 0.5rem;
    }
  }
</style>
